 (一)用户模块：注册、激活、登录、退出
 1、异步提交表单：
为了获取服务器响应的数据；
由于web视图层采用html展示页面，而不是jsp，
因此无法直接从与servlet相关的域对象域后台交互数据，只能采用异步方式，通过ajax获得响应数据

 2、邮件激活：
为了保证用户填写的邮箱是正确的，将来可以推广一些宣传信息到用户邮箱
用户表中有字段code记录激活码，以及字段status记录激活状态(Y/N)
return UUID.randomUUID().toString().replace("-",""); // 激活码

2.1、MailUtils工具类，ActiveUserServlet.java，UserServiceImpl.java,UserDaoImpl.java
2.2、后来由于有邮箱安全隐患，于是改为直接在regist_ok.html点击激活即可：
ActiveUserServlet.java,UserResistServelt.java,register_ok.html

 3、退出功能：
session中存储了user对象，即表明用户登录；在LoginServlet.java中，存储了session的user键
实现：访问servlet，将session销毁；跳转到登录页面

优化：抽取BaseServlet
    好处：功能都在一个类中，抽取成一个模块，有些公共代码可以抽取出来复用，也简化了代码架构
之前是一个servlet对应一个功能，比如登录功能，注册功能，激活功能，查找用户功能，退出功能，导致servlet的个数很多
现在进行优化，将一个servlet对应一个模块，如用户模块，商品模块；每个模块下存放功能方法
实现：* 定义BaseServlet继承HttpServlet，BaseServlet重写service()方法；
       BaseServlet不需要被访问到，访问具体模块即可
       每个模块都继承BaseServlet，如一个用户模块UserServlet；
       将来UserServlet一被访问，就会执行父类BaseServlet的service方法
     * UserServlet类的@WebServlet("/模块名/方法名")，可以直接访问到某类下的某方法
       即通过request.getRequestURI()获得访问路径，并截取字符串获取方法名，之后调用反射获得方法对象并执行方法，即可实现
       (有点框架的感觉了)

(二)分类数据模块
 分类数据展示：在header.html窗口中，用js和jq在函数中拼接li，将tab_category表的数据展示出来
    优化：由于每次页面加载后，都要请求category/findAll的findAll方法，重新请求数据库，对数据库的压力较大，
         而分类的数据一般是不会变动的，因此采用对分类数据缓存优化，redis
    即：在service层，先从redis中查询，再判断查出的集合中是否为空；
       为空: 说明是第一次访问，于是查询数据库，并将数据存入redis中，返回集合；
       不为空：不是第一次访问，直接返回集合；
    排序：期望按数据库中的顺序取数，使用sortedsort排序查询

(三)旅游路线模块
由于前台页面都是html，无法像jsp那样通过el表达式和jstl，与后台交互数据，而是前台发送ajax请求到后台，后台发回json数据进行交互
因此，像分页的页码等信息，以及搜索功能，都是通过ajax请求，将前台参数包裹在访问路径后,即【?参数名=参数值&参数名=参数值】,要么把这个值写在跳转链接里，要么写在$.get("",{},回调函数) 中
当然，像注册页面，登录页面，可以直接用表单form传值，后台用request对象的方法接收，如：request.getParameter(String id_name)
 1、分页
 定义分页对象，让数据分页显示: 将数据封装到PageBean类中，组合类PageBean和Route
 按照类别表中的cid，不同的cid查询不同的数据返回
 2、旅游线路搜索功能：
 模糊查询，返回分页对象 ； 注意 没有rname时，以及没有cid时，是否添加到sql的where子句的判断条件

